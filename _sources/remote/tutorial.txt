Tutorial
==========

Something here




Some Examples
================

This code can be executed in an **ipython notebook --pylab inline** in browser maltlab like environment.

.. testcode::

	cd uni/MT/EIC/py

.. testcode::

	import pandas as pd
	import ni.model.pointprocess
	reload(ni.model.pointprocess)
	p1 = ni.model.pointprocess.createPoisson(0.1,1000)

	p2 = ni.model.pointprocess.createPoisson(sin(numpy.array(range(0,200))*0.01)*0.5- 0.2,1000)

	import matplotlib
	matplotlib.rcParams['savefig.dpi'] = 72

.. testcode::

	from scikits.statsmodels.genmod import generalized_linear_model 
	from scikits.statsmodels.genmod.families.family import Binomial

	spikes = np.array(ni.model.pointprocess.createPoisson(sin(numpy.array(range(0,200))*0.01)*0.5- 0.2,1000).getCounts())

	design_matrix = [[exp(-1*(((i-j*100))**2)/1000) for j in range(0,9)] for i in linspace(0,999,1000)]  
	glm = generalized_linear_model.GLM(spikes,design_matrix, family = Binomial())
	res = glm.fit()

.. testcode::

	import ni.model.glm as glm
	import ni.tools.bootstrap as bs
	reload(glm)
	reload(bs)

	length = 600

	target = abs(sin(numpy.array(range(0,length))*0.01)*0.1)
	spikes = np.array([ni.model.pointprocess.createPoisson(target,length).getCounts() for i in range(0,10)])
	#design_matrix = [[exp(-1*(((i-j*60))**2)/10000) for j in range(0,9)] for i in linspace(0,length-1,length)]
	design_matrix = [[exp(-1*(((i-j*60))**2)/3000) for j in range(0,9)] for i in linspace(0,length-1,length)]
	design_matrix2 = []
	for i in range(0,10):
	    design_matrix2.append(design_matrix)
	design_matrix = vstack(design_matrix2)
	plot(target,'bo')
	for i in range(0,10):
	    ni.model.pointprocess.plotGaussed(spikes[i],30)
	#bs.evaluate(glm.GLM(spikes,design_matrix),spikes,10)

.. image:: _static/notebook_examples/01.png

.. testcode::

	from scikits.statsmodels.genmod import generalized_linear_model 
	from scikits.statsmodels.genmod.families.family import Binomial

	Data = reshape(spikes,(length * 10,1))
	#plot(Data,'bo')
	#plot(design_matrix[:,3])

	dev = np.array([abs((design_matrix[find(Data.transpose()),i])) for i in range(0,9)])
	prediction = sum(design_matrix * mean(dev,1),1)
	plot(prediction[0:length]/max(prediction))
	plot(design_matrix[0:length,:])
	plot(target/max(target),'b.')
	#g = generalized_linear_model.GLM(Data,design_matrix[:,1:5], family = Binomial())
	#res = g.fit()

	#model = glm.GLM(Data,design_matrix)
	#m = model.fit(Data)

.. image:: _static/notebook_examples/02.png

.. testcode::

	g = generalized_linear_model.GLM(Data,design_matrix, family = Binomial())
	res = g.fit()

.. note::

	**Generates an ERROR**
	
	---------------------------------------------------------------------------
	ValueError                                Traceback (most recent call last)
	/home/plogic/uni/MT/EIC/py/<ipython-input-298-79fc06ff0302> in <module>()
	      1 g = generalized_linear_model.GLM(Data,design_matrix, family = Binomial())
	----> 2 res = g.fit()
	
	/usr/lib/pymodules/python2.7/scikits/statsmodels/genmod/generalized_linear_model.pyc in fit(self, maxiter, method, tol, scale)
	    404             wlsendog = eta + self.family.link.deriv(mu) * (self.endog-mu) \
	    405                  - offset
	--> 406             wls_results = WLS(wlsendog, wlsexog, self.weights).fit()
	    407             eta = np.dot(self.exog, wls_results.params) + offset
	    408             mu = self.family.fitted(eta)
	
	/usr/lib/pymodules/python2.7/scikits/statsmodels/regression/linear_model.pyc in __init__(self, endog, exog, weights)
	    383                    weights.size == design_rows) :
	    384                 raise ValueError(\
	--> 385                     'Weights must be scalar or same length as design')
	    386             self.weights = weights.reshape(design_rows)
	    387         super(WLS, self).__init__(endog, exog)
	
	ValueError: Weights must be scalar or same length as design

.. testcode::

	design_matrix = [[exp(-1*(((i-j*30))**2)/10000) for j in range(0,9)] for i in linspace(0,299,300)]
	design_matrix2 = []
	for i in range(0,10):
	    design_matrix2.append(design_matrix)
	#design_matrix2
	design_matrix = vstack(design_matrix2)

.. testcode::

	img = imshow(np.array(design_matrix).transpose(), aspect='auto')
	img.set_interpolation('nearest')

.. image:: _static/notebook_examples/03.png


.. testcode::

	res.summary()

.. note::

				      Generalized linear model                             
	===================================================================================
	  Model Family:                  Binomial   # of obs:                        1000  
	  Method:                            IRLS   Df residuals:                     991  
	  Dependent Variable:                   Y   Df model:                           8  
	  Date:                  Thu, 30 May 2013   Scale:                         1.0000  
	  Time:                          17:29:30   Log likelihood:             -521.6848  
	==================================================================================
			    coefficient   stand errors    t-statistic    Conf. Interval   
	----------------------------------------------------------------------------------
	  x0                   -24.4281                       -2.4888 [-43.666, -5.190]   
	  x1                    -2.1134                       -4.7164  [-2.992, -1.235]   
	  x2                    -3.3877                       -5.3690  [-4.624, -2.151]   
	  x3                    -2.2992                       -4.9481  [-3.210, -1.388]   
	  x4                    -2.2641                       -4.9220  [-3.166, -1.362]   
	  x5                    -1.6907                       -4.2519  [-2.470, -0.911]   
	  x6                    -2.1377                       -4.8080  [-3.009, -1.266]   
	  x7                    -1.3351                       -3.6306  [-2.056, -0.614]   
	  x8                    -2.3364                       -4.9854  [-3.255, -1.418]   
	==================================================================================

.. testcode::

	plot(res.resid_deviance)

.. image:: _static/notebook_examples/04.png

.. testcode::

	p2.plot()

	p2.plotGaussed(10)

.. image:: _static/notebook_examples/05.png

.. testcode::

	p1.plotGaussed(20)
	plot(p1.frate)

.. image:: _static/notebook_examples/06.png

.. testcode::

	p2.plotGaussed(20)
	plot(p2.frate)

.. image:: _static/notebook_examples/07.png

.. testcode::

	frate = (numpy.array(range(0,200))*0.001)*0.2+0.01
	channels = 9

	dists = [ni.model.pointprocess.createPoisson(frate,1000) for i in range(0,channels)]
	#for i in range(0,9): dists[i].plotGaussed(10)
	import itertools
	spks = np.array([dists[i].getCounts() for i in range(0,channels) for j in range(0,99) ])
	imshow(-1*spks)
	set_cmap('gray')

.. image:: _static/notebook_examples/08.png

.. testcode::

	for i in range(0,channels): dists[i].plotGaussed(10)

.. image:: _static/notebook_examples/09.png

.. testcode::

	ni.model.pointprocess.plotGaussed(np.array([dists[i].getCounts() for i in range(0,channels)]).mean(axis=0),20)
	plot(dists[0].frate)

.. image:: _static/notebook_examples/10.png

.. testcode::

	reload(ni.model.pointprocess)

	frate = sin(numpy.array(range(0,1000))*0.1)*0.02+0.04
	mc = ni.model.pointprocess.MultiChannelPointProcess(20)
	mc.set(lambda x: ni.model.pointprocess.createPoisson(frate,1000))
	#m = ni.model.pointprocess.createPoisson(0.1,1000)
	#mc.set(lambda x: m)

	ni.model.pointprocess.plotGaussed(mc.getMeanCounts(),5)
	c = np.array(mc.get(lambda x: x.getCounts())).var(axis=0)

	ni.model.pointprocess.plotGaussed(c,5)
	plot(frate)

.. image:: _static/notebook_examples/11.png

.. testcode::

	c = np.array(mc.get(lambda x: x.getCounts())).var(axis=1)

	ni.model.pointprocess.plotGaussed(c,5)

.. image:: _static/notebook_examples/12.png

.. testcode::

	c2 = np.array(mc.get2(lambda x,y: np.convolve(x.getCounts(),y.getCounts()).sum()))
	subplot(1,2,1)
	ni.model.pointprocess.plotGaussed(c2,5)
	subplot(1,2,2)

	imshow(c2)
	colorbar()
	set_cmap('jet')

.. image:: _static/notebook_examples/13.png

.. testcode::

	reload(ni.model.pointprocess)

	ppc = ni.model.pointprocess.PPContainer()
	ppc.setData([ni.model.pointprocess.createPoisson(0.1,1000).getCounts() for i in range(0,10)])
	ppc.data.columns
	[ni.model.pointprocess.plotGaussed(ppc.data[i],20) for i in range(0,10)]

.. note::
	
	[None, None, None, None, None, None, None, None, None, None]

.. image:: _static/notebook_examples/14.png

.. testcode::

	cont = pd.DataFrame([ni.model.pointprocess.createPoisson(0.1,1000).getCounts() for i in range(0,10)])
	[ni.model.pointprocess.plotGaussed(cont.T[i],20) for i in cont.T.columns]

.. image:: _static/notebook_examples/15.png

.. testcode::

	ni.model.pointprocess.plotMultiSpikes(cont.T)

.. image:: _static/notebook_examples/16.png

.. testcode::

	import ni.model.net_sim
	reload(ni.model.net_sim)
	c = ni.model.net_sim.SimulationConfiguration()
	c.Nneur = 10
	net = ni.model.net_sim.Net(c)
	print net
	net.plot_firing_rates()

.. note::

	'ni.model.net_sim' Simulation Setup
	Timerange: (250, 10250)
	 10 channels with firing rates: 
		[12.815928361, 29.6328550796, 19.9415819867, 13.6710936491, 20.242131795, 11.4661487294, 11.5071338947, 10.2727521514, 24.2587596858, 13.1497981307]
	Firing Rates plot


.. image:: _static/notebook_examples/17.png

.. testcode::

	connections = [[abs(net.Jall[i,j,:].sum()) < 0.001 for i in range(0,10)] for j in range(0,10)]
	#imgplot = imshow(connections)
	#imgplot.set_interpolation('nearest')
	import pydot
	d = pydot.graph_from_edges(np.argwhere(connections), directed=True)
	#d.create_png()
	d.set_layout('neato')
	d.set_mindist(10)
	d.write_png("test2.png")

	d2 = pydot.graph_from_edges(connections, directed=True)
	#d.create_png()
	d2.set_layout('neato')
	d2.write_png("test1.png")

.. testcode::

	for i in range(1,11):
	    print i
	    res1 = net.simulate() #ni.model.net_sim.simulate(c)
	    res1.plot_firing_rates()
	    print res1

.. note::

	0
	Firing Rates plot
	'ni.model.net_sim' Simulation Result
	Took 5.07s to compute.
	Timerange: (0, 10250)
	2359 Spikes in 10 channels: 
		[242, 277, 131, 336, 326, 199, 260, 141, 233, 214]
	1
	Firing Rates plot
	'ni.model.net_sim' Simulation Result
	Took 5.32s to compute.
	Timerange: (0, 10250)
	2305 Spikes in 10 channels: 
		[246, 329, 134, 299, 303, 199, 273, 123, 201, 198]
	2
	Firing Rates plot
	'ni.model.net_sim' Simulation Result
	Took 5.17s to compute.
	Timerange: (0, 10250)
	2449 Spikes in 10 channels: 
		[251, 334, 125, 326, 324, 235, 261, 162, 214, 217]
	3
	Firing Rates plot
	'ni.model.net_sim' Simulation Result
	Took 9.69s to compute.
	Timerange: (0, 10250)
	2436 Spikes in 10 channels: 
		[241, 343, 131, 310, 324, 210, 277, 131, 235, 234]
	4
	Firing Rates plot
	'ni.model.net_sim' Simulation Result
	Took 6.74s to compute.
	Timerange: (0, 10250)
	2352 Spikes in 10 channels: 
		[251, 334, 121, 332, 306, 206, 278, 113, 225, 186]
	5
	Firing Rates plot
	'ni.model.net_sim' Simulation Result
	Took 5.3s to compute.
	Timerange: (0, 10250)
	2342 Spikes in 10 channels: 
		[253, 332, 126, 325, 321, 216, 240, 114, 198, 217]
	6
	Firing Rates plot
	'ni.model.net_sim' Simulation Result
	Took 5.39s to compute.
	Timerange: (0, 10250)
	2395 Spikes in 10 channels: 
		[263, 340, 121, 328, 305, 207, 268, 135, 216, 212]
	7
	Firing Rates plot
	'ni.model.net_sim' Simulation Result
	Took 5.72s to compute.
	Timerange: (0, 10250)
	2340 Spikes in 10 channels: 
		[248, 308, 137, 317, 317, 189, 277, 116, 225, 206]
	8
	Firing Rates plot
	'ni.model.net_sim' Simulation Result
	Took 5.64s to compute.
	Timerange: (0, 10250)
	2357 Spikes in 10 channels: 
		[244, 326, 131, 303, 347, 203, 283, 107, 201, 212]
	9
	Firing Rates plot
	'ni.model.net_sim' Simulation Result
	Took 5.71s to compute.
	Timerange: (0, 10250)
	2361 Spikes in 10 channels: 
		[242, 341, 149, 307, 338, 197, 253, 122, 191, 221]

.. image:: _static/notebook_examples/18.png

.. testcode::

	#[r.plot_firing_rates() for r in net.results]
	plot(numpy.array([r.num_spikes_per_channel for r in net.results]))
	#plot([r.spikes.T.mean() for r in net.results].T)
	plot([0]*len(net.results))

.. image:: _static/notebook_examples/19.png

.. testcode::

	res2 = net.simulate()
	res2.plot()
	print res2

.. note::

	'ni.model.net_sim' Simulation Result
	Took 11.85s to compute.
	Timerange: (0, 10250)
	4883 Spikes in 20 channels: 
		[219, 258, 299, 343, 379, 346, 153, 139, 106, 220, 223, 310, 193, 274, 212, 252, 163, 291, 202, 301]

.. image:: _static/notebook_examples/20.png


.. testcode::

	print res1
	len(net.Jall.nonzero()[0])
	print "Interaction plot"
	pyplot.figsize(10,10)
	for i in range(0,net.config.Nneur):
	  subplot(5,net.config.Nneur/5,i+1)
	  p = plot(net.Jall[i,:,:].T)
	  print i, net.Jall[i,:,:].sum()
	  #p.set_cmap('hot')
	  title(str(i))

.. note::

	'ni.model.net_sim' Simulation Result
	Took 18.46s to compute.
	Timerange: (0, 10250)
	4801 Spikes in 20 channels: 
		[202, 280, 241, 307, 347, 358, 140, 149, 110, 210, 206, 323, 185, 281, 239, 255, 174, 262, 248, 284]
	Interaction plot
	0 -2.03759911202
	1 -3.44761233133
	2 0.723006313412
	3 -0.952023565109
	4 4.25574511824
	5 -3.3453963685
	6 0.0627568073968
	7 -2.69221647701
	8 1.76568144941
	9 1.52325958899
	10 -0.000215659457296
	11 1.16132044427
	12 0.784372891918
	13 -0.000215659457296
	14 -0.000215659457296
	15 -0.000215659457296
	16 3.06368154242
	17 -1.95556680782
	18 -0.349520835524
	19 -3.41784456774

.. image:: _static/notebook_examples/21.png

.. testcode::


	ni.model.pointprocess.plotGaussed(res.spikes.T.sum(),10)

.. image:: _static/notebook_examples/22.png

.. testcode::

	#conv = [[np.convolve(p1,p2) for p1 in res.spikes] for p2 in res.spikes]
	imshow([[np.convolve(res.spikes[j],res.spikes[i]).sum() for i in range(0,10)] for j in range(0,10)])

.. image:: _static/notebook_examples/23.png

.. testcode::

	res.spikes.info

.. note::

	<bound method DataFrame.info of <class 'pandas.core.frame.DataFrame'>
	Int64Index: 10250 entries, 0 to 10249
	Data columns:
	0    10250  non-null values
	1    10250  non-null values
	2    10250  non-null values
	3    10250  non-null values
	4    10250  non-null values
	5    10250  non-null values
	6    10250  non-null values
	7    10250  non-null values
	8    10250  non-null values
	9    10250  non-null values
	dtypes: float64(10)>

.. testcode::


	import sklearn

	enet = sklearn.linear_model.ElasticNet()
	X = np.array(res.spikes)[0:100,0:8]
	y = np.array(res.spikes)[0:100,9]
	enet.fit(X,y)
	enet.predict([4,5,6])

.. note::

	ElasticNet(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
	      normalize=False, precompute='auto', rho=0.5, tol=0.0001)

.. testcode::

	plot(np.array(res.spikes)[0:100,0:8])

.. image:: _static/notebook_examples/24.png
